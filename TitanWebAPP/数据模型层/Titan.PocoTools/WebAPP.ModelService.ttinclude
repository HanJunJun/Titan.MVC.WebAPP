<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="EnvDTE"#>
<#
	fileManager.StartHeader();//页眉
	//获取项目上一级
	string projPath=Host.ResolveAssemblyReference("$(ProjectDir)").TrimEnd('\\');
	Directory.SetCurrentDirectory(Directory.GetParent(projPath).FullName);
	Directory.SetCurrentDirectory(Directory.GetParent(Directory.GetCurrentDirectory()).FullName);
	string currentPath = Directory.GetCurrentDirectory();
	//WriteLine(currentPath);
	//创建每个表的Svc
	foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping ).OrderBy(x => x.NameHumanCase) select t)
    {
		//使用代码标识区分生成的代码块范围，可重复多个
		string outFilePath=currentPath+@"\领域驱动层\Titan.AppService\ModelService\"+#><#tbl.Name +"Svc.cs";
		//WriteLine(outFilePath);
		fileManager.StartNewFile(outFilePath);#>
//------------------------------------------------------------------------------
//此代码由T4模板自动生成
//生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//对此文件的更改可能会导致不正确的行为，并且如果
//重新生成代码，这些更改将会丢失。
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Titan.Model;
using Titan.Model.DataModel;
using Titan.RepositoryCode;

namespace Titan.AppService.ModelService
{
    public class <#=tbl.Name#>Svc
    {
		private ModelRespositoryFactory<<#=tbl.Name#>, Guid> _modeSvc;
        public <#=tbl.Name#>Svc(ModelRespositoryFactory<<#=tbl.Name#>, Guid> modeSvc)
        {
            _modeSvc = modeSvc;
        }
		 /// <summary>
        /// 添加对象
        /// </summary>
        /// <returns></returns>
        public void AddModel(<#=tbl.Name#> entity)
        {
             _modeSvc.Add(entity);
        }

		/// <summary>
        /// 修改对象
        /// </summary>
        /// <returns></returns>
        public void UpdateModel(<#=tbl.Name#> entity)
        {
           _modeSvc.Save(entity);
        }

		/// <summary>
        /// 删除对象
        /// </summary>
        /// <returns></returns>
        public void DeleteModel(<#=tbl.Name#> entity)
        {
              _modeSvc.Remove(entity);
        }

		/// <summary>
        /// 根据主键查询对象
        /// </summary>
        /// <returns></returns>
        public <#=tbl.Name#> FindModelById(Guid id)
        {
            <#=tbl.Name#> tav = _modeSvc.FindById(id);
            return tav;
        }

		/// <summary>
        /// 根据表达式查询集合
        /// </summary>
        /// <returns></returns>
        public List<<#=tbl.Name#>> FindModelByValue(Expression<Func<<#=tbl.Name#>, bool>> predicate)
        {       
            List<<#=tbl.Name#>> tavList = _modeSvc.GetDatas(predicate).ToList();
            return tavList;
        }


		/// <summary>
        /// 根据根据条件查询并分页
        /// </summary>
        /// <param name="pageIndex">页面索引</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="rowCount">数据总数</param>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按string排序</param>
        /// <param name="orderby2">条件2：按string排序</param>
        /// <param name="isAsc">是否升序</param>
        public List<<#=tbl.Name#>> GetModelList(int pageIndex,int pageSize,out int rowCount, Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, string>> orderby1,Expression<Func<<#=tbl.Name#>, string>> orderby2,bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindPagedList(pageIndex, pageSize, out rowCount, selector, orderby1,orderby2, isAsc).ToList();
            return tavList;
        }

        /// <summary>
        /// 根据根据条件查询并分页
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按string排序</param>
        /// <param name="orderby2">条件2：按string排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelList(Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, string>> orderby1,Expression<Func<<#=tbl.Name#>, string>> orderby2, bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindList(selector, orderby1,orderby2, isAsc).ToList();
            return tavList;
        }


	    /// <summary>
        /// 根据根据条件查询并分页
        /// </summary>
        /// <param name="pageIndex">页面索引</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="rowCount">数据总数</param>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按DateTime排序</param>
        /// <param name="orderby2">条件2：按DateTime排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelListT(int pageIndex,int pageSize,out int rowCount, Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, DateTime>> orderby1,Expression<Func<<#=tbl.Name#>, DateTime>> orderby2,bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindPagedList(pageIndex, pageSize, out rowCount, selector, orderby1,orderby2, isAsc).ToList();
            return tavList;
        }

		/// <summary>
        /// 根据根据条件查询并分页
        /// </summary>
        /// <param name="pageIndex">页面索引</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="rowCount">数据总数</param>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按DateTime排序</param>
        /// <param name="orderby2">条件2：按string排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelListT(int pageIndex, int pageSize, out int rowCount, Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, DateTime>> orderby1, Expression<Func<<#=tbl.Name#>, string>> orderby2, bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindPagedListOrderBy(pageIndex, pageSize, out rowCount, selector, orderby1, orderby2, isAsc).ToList();
            return tavList;
        }

		/// <summary>
        /// 根据根据条件查询
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按DateTime排序</param>
        /// <param name="orderby2">条件2：按DateTime排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelListT(Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, DateTime>> orderby1,Expression<Func<<#=tbl.Name#>, DateTime>> orderby2, bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindList(selector, orderby1,orderby2, isAsc).ToList();
            return tavList;
        }



		/// <summary>
        /// 根据根据条件查询(多组合查询)
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按int排序</param>
        /// <param name="orderby2">条件2：按DateTime排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelListOrderBy(Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, int>> orderby1, Expression<Func<<#=tbl.Name#>, DateTime>> orderby2, bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindListOrderBy(selector, orderby1, orderby2, isAsc).ToList();
            return tavList;
        }


		/// <summary>
        /// 根据根据条件查询(多组合查询)
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="orderby1">条件1：按DateTime排序</param>
        /// <param name="orderby2">条件2：按string排序</param>
        /// <param name="isAsc">是否升序</param>
        /// <returns></returns>
        public List<<#=tbl.Name#>> GetModelListOrderBy(Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, DateTime>> orderby1, Expression<Func<<#=tbl.Name#>, string>> orderby2, bool isAsc)
        {
            List<<#=tbl.Name#>> tavList = _modeSvc.FindListOrderBy(selector, orderby1, orderby2, isAsc).ToList();
            return tavList;
        }


		/// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <returns></returns>
        public int DeleteList(Expression<Func<<#=tbl.Name#>, bool>> selector)
        {
            int t= _modeSvc.DeleteList(selector);
            return t;
        }


        /// <summary>
        /// 批量更新
        /// </summary>
        /// <param name="selector">查询条件lambda</param>
        /// <param name="updateselector">更新对象</param>
        /// <returns></returns>
        public int UpdateList(Expression<Func<<#=tbl.Name#>, bool>> selector, Expression<Func<<#=tbl.Name#>, <#=tbl.Name#>>> updateselector)
        {
            int t = _modeSvc.UpdateList(selector, updateselector);
            return t;
        }
    }
}
  <#}
	fileManager.StartFooter();
	fileManager.EndBlock();
	fileManager.Process();

	//加载代码文件到解决方案
	//var soln =new Solution();
    //var proj =new Project();
    //var projitems =new ProjectItems();
    //soln = DTE.Solution    
    //soln.Create(@"D:\", "MyNewSolution")  

    //proj = soln.AddFromTemplate(@"D:\HanJunJun\小微机构\NIS\NIS姑苏\AppService\AppService.csproj", @"D:\", "123", True)  
	//projitems = proj.ProjectItems  
	//projitems.AddFromFileCopy("C:    emp\somefile.bas")  
#>

